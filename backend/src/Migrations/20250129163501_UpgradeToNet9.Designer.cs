// <auto-generated />
using System;
using System.Text.Json;
using Database.Data;
using Database.Enumerations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129163501_UpgradeToNet9")]
    partial class UpgradeToNet9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("database")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "database", "data_kind", new[] { "calorimetric_data", "geometric_data", "hygrothermal_data", "optical_data", "photovoltaic_data" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "database", "standardizer", new[] { "aerc", "agi", "ashrae", "breeam", "bs", "bsi", "cen", "cie", "dgnb", "din", "dvwg", "iec", "ies", "ift", "iso", "jis", "leed", "nfrc", "riba", "ul", "unece", "vdi", "vff", "well" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Data.CalorimetricData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.PrimitiveCollection<double[]>("GValues")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.PrimitiveCollection<double[]>("UValues")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.PrimitiveCollection<string[]>("Warnings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("calorimetric_data", "database");
                });

            modelBuilder.Entity("Database.Data.GeometricData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.PrimitiveCollection<double[]>("Thicknesses")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.PrimitiveCollection<string[]>("Warnings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("geometric_data", "database");
                });

            modelBuilder.Entity("Database.Data.GetHttpsResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("CalorimetricDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DataFormatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("GeometricDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("HashValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("HygrothermalDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OpticalDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotovoltaicDataId")
                        .HasColumnType("uuid");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CalorimetricDataId");

                    b.HasIndex("GeometricDataId");

                    b.HasIndex("HygrothermalDataId");

                    b.HasIndex("OpticalDataId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PhotovoltaicDataId");

                    b.ToTable("get_https_resource", "database");
                });

            modelBuilder.Entity("Database.Data.HygrothermalData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.PrimitiveCollection<string[]>("Warnings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("hygrothermal_data", "database");
                });

            modelBuilder.Entity("Database.Data.OpticalData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.PrimitiveCollection<double[]>("ColorRenderingIndices")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.PrimitiveCollection<double[]>("InfraredEmittances")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.PrimitiveCollection<double[]>("NearnormalHemisphericalSolarReflectances")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.PrimitiveCollection<double[]>("NearnormalHemisphericalSolarTransmittances")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.PrimitiveCollection<double[]>("NearnormalHemisphericalVisibleReflectances")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.PrimitiveCollection<double[]>("NearnormalHemisphericalVisibleTransmittances")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.PrimitiveCollection<string[]>("Warnings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("optical_data", "database");
                });

            modelBuilder.Entity("Database.Data.PhotovoltaicData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.PrimitiveCollection<string[]>("Warnings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("photovoltaic_data", "database");
                });

            modelBuilder.Entity("Database.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("user", "database");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys", "database");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", "database");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", "database");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", "database");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", "database");
                });

            modelBuilder.Entity("Database.Data.CalorimetricData", b =>
                {
                    b.OwnsOne("Database.Data.AppliedMethod", "AppliedMethod", b1 =>
                        {
                            b1.Property<Guid>("CalorimetricDataId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MethodId")
                                .HasColumnType("uuid");

                            b1.HasKey("CalorimetricDataId");

                            b1.ToTable("calorimetric_data", "database");

                            b1.WithOwner()
                                .HasForeignKey("CalorimetricDataId");

                            b1.OwnsMany("Database.Data.NamedMethodArgument", "Arguments", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodCalorimetricDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<JsonDocument>("Value")
                                        .IsRequired()
                                        .HasColumnType("jsonb");

                                    b2.HasKey("AppliedMethodCalorimetricDataId", "Id");

                                    b2.ToTable("calorimetric_data_Arguments", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodCalorimetricDataId");
                                });

                            b1.OwnsMany("Database.Data.NamedMethodSource", "Sources", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodCalorimetricDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("AppliedMethodCalorimetricDataId", "Id");

                                    b2.ToTable("calorimetric_data_Sources", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodCalorimetricDataId");

                                    b2.OwnsOne("Database.Data.CrossDatabaseDataReference", "Value", b3 =>
                                        {
                                            b3.Property<Guid>("NamedMethodSourceAppliedMethodCalorimetricDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("NamedMethodSourceId")
                                                .HasColumnType("integer");

                                            b3.Property<Guid>("DataId")
                                                .HasColumnType("uuid");

                                            b3.Property<DataKind>("DataKind")
                                                .HasColumnType("database.data_kind");

                                            b3.Property<DateTime>("DataTimestamp")
                                                .HasColumnType("timestamp with time zone");

                                            b3.Property<Guid>("DatabaseId")
                                                .HasColumnType("uuid");

                                            b3.HasKey("NamedMethodSourceAppliedMethodCalorimetricDataId", "NamedMethodSourceId");

                                            b3.ToTable("calorimetric_data_Sources", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("NamedMethodSourceAppliedMethodCalorimetricDataId", "NamedMethodSourceId");
                                        });

                                    b2.Navigation("Value")
                                        .IsRequired();
                                });

                            b1.Navigation("Arguments");

                            b1.Navigation("Sources");
                        });

                    b.OwnsMany("Database.Data.DataApproval", "Approvals", b1 =>
                        {
                            b1.Property<Guid>("CalorimetricDataId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ApproverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("KeyFingerprint")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Query")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Response")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("CalorimetricDataId", "Id");

                            b1.ToTable("calorimetric_data_Approvals", "database");

                            b1.WithOwner()
                                .HasForeignKey("CalorimetricDataId");

                            b1.OwnsOne("Database.Data.Publication", "Publication", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalCalorimetricDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("ArXiv")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<string[]>("Authors")
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Doi")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<string>("Urn")
                                        .HasColumnType("text");

                                    b2.Property<string>("WebAddress")
                                        .HasColumnType("text");

                                    b2.HasKey("DataApprovalCalorimetricDataId", "DataApprovalId");

                                    b2.ToTable("calorimetric_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalCalorimetricDataId", "DataApprovalId");
                                });

                            b1.OwnsOne("Database.Data.Standard", "Standard", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalCalorimetricDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("Locator")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<Standardizer[]>("Standardizers")
                                        .IsRequired()
                                        .HasColumnType("database.standardizer[]");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<int?>("Year")
                                        .HasColumnType("integer");

                                    b2.HasKey("DataApprovalCalorimetricDataId", "DataApprovalId");

                                    b2.ToTable("calorimetric_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalCalorimetricDataId", "DataApprovalId");

                                    b2.OwnsOne("Database.Data.Numeration", "Numeration", b3 =>
                                        {
                                            b3.Property<Guid>("StandardDataApprovalCalorimetricDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("StandardDataApprovalId")
                                                .HasColumnType("integer");

                                            b3.Property<string>("MainNumber")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Prefix")
                                                .HasColumnType("text");

                                            b3.Property<string>("Suffix")
                                                .HasColumnType("text");

                                            b3.HasKey("StandardDataApprovalCalorimetricDataId", "StandardDataApprovalId");

                                            b3.ToTable("calorimetric_data_Approvals", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("StandardDataApprovalCalorimetricDataId", "StandardDataApprovalId");
                                        });

                                    b2.Navigation("Numeration")
                                        .IsRequired();
                                });

                            b1.Navigation("Publication");

                            b1.Navigation("Standard");
                        });

                    b.Navigation("AppliedMethod")
                        .IsRequired();

                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("Database.Data.GeometricData", b =>
                {
                    b.OwnsOne("Database.Data.AppliedMethod", "AppliedMethod", b1 =>
                        {
                            b1.Property<Guid>("GeometricDataId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MethodId")
                                .HasColumnType("uuid");

                            b1.HasKey("GeometricDataId");

                            b1.ToTable("geometric_data", "database");

                            b1.WithOwner()
                                .HasForeignKey("GeometricDataId");

                            b1.OwnsMany("Database.Data.NamedMethodArgument", "Arguments", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodGeometricDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<JsonDocument>("Value")
                                        .IsRequired()
                                        .HasColumnType("jsonb");

                                    b2.HasKey("AppliedMethodGeometricDataId", "Id");

                                    b2.ToTable("geometric_data_Arguments", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodGeometricDataId");
                                });

                            b1.OwnsMany("Database.Data.NamedMethodSource", "Sources", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodGeometricDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("AppliedMethodGeometricDataId", "Id");

                                    b2.ToTable("geometric_data_Sources", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodGeometricDataId");

                                    b2.OwnsOne("Database.Data.CrossDatabaseDataReference", "Value", b3 =>
                                        {
                                            b3.Property<Guid>("NamedMethodSourceAppliedMethodGeometricDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("NamedMethodSourceId")
                                                .HasColumnType("integer");

                                            b3.Property<Guid>("DataId")
                                                .HasColumnType("uuid");

                                            b3.Property<DataKind>("DataKind")
                                                .HasColumnType("database.data_kind");

                                            b3.Property<DateTime>("DataTimestamp")
                                                .HasColumnType("timestamp with time zone");

                                            b3.Property<Guid>("DatabaseId")
                                                .HasColumnType("uuid");

                                            b3.HasKey("NamedMethodSourceAppliedMethodGeometricDataId", "NamedMethodSourceId");

                                            b3.ToTable("geometric_data_Sources", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("NamedMethodSourceAppliedMethodGeometricDataId", "NamedMethodSourceId");
                                        });

                                    b2.Navigation("Value")
                                        .IsRequired();
                                });

                            b1.Navigation("Arguments");

                            b1.Navigation("Sources");
                        });

                    b.OwnsMany("Database.Data.DataApproval", "Approvals", b1 =>
                        {
                            b1.Property<Guid>("GeometricDataId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ApproverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("KeyFingerprint")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Query")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Response")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("GeometricDataId", "Id");

                            b1.ToTable("geometric_data_Approvals", "database");

                            b1.WithOwner()
                                .HasForeignKey("GeometricDataId");

                            b1.OwnsOne("Database.Data.Publication", "Publication", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalGeometricDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("ArXiv")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<string[]>("Authors")
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Doi")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<string>("Urn")
                                        .HasColumnType("text");

                                    b2.Property<string>("WebAddress")
                                        .HasColumnType("text");

                                    b2.HasKey("DataApprovalGeometricDataId", "DataApprovalId");

                                    b2.ToTable("geometric_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalGeometricDataId", "DataApprovalId");
                                });

                            b1.OwnsOne("Database.Data.Standard", "Standard", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalGeometricDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("Locator")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<Standardizer[]>("Standardizers")
                                        .IsRequired()
                                        .HasColumnType("database.standardizer[]");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<int?>("Year")
                                        .HasColumnType("integer");

                                    b2.HasKey("DataApprovalGeometricDataId", "DataApprovalId");

                                    b2.ToTable("geometric_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalGeometricDataId", "DataApprovalId");

                                    b2.OwnsOne("Database.Data.Numeration", "Numeration", b3 =>
                                        {
                                            b3.Property<Guid>("StandardDataApprovalGeometricDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("StandardDataApprovalId")
                                                .HasColumnType("integer");

                                            b3.Property<string>("MainNumber")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Prefix")
                                                .HasColumnType("text");

                                            b3.Property<string>("Suffix")
                                                .HasColumnType("text");

                                            b3.HasKey("StandardDataApprovalGeometricDataId", "StandardDataApprovalId");

                                            b3.ToTable("geometric_data_Approvals", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("StandardDataApprovalGeometricDataId", "StandardDataApprovalId");
                                        });

                                    b2.Navigation("Numeration")
                                        .IsRequired();
                                });

                            b1.Navigation("Publication");

                            b1.Navigation("Standard");
                        });

                    b.Navigation("AppliedMethod")
                        .IsRequired();

                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("Database.Data.GetHttpsResource", b =>
                {
                    b.HasOne("Database.Data.CalorimetricData", "CalorimetricData")
                        .WithMany("Resources")
                        .HasForeignKey("CalorimetricDataId");

                    b.HasOne("Database.Data.GeometricData", "GeometricData")
                        .WithMany("Resources")
                        .HasForeignKey("GeometricDataId");

                    b.HasOne("Database.Data.HygrothermalData", "HygrothermalData")
                        .WithMany("Resources")
                        .HasForeignKey("HygrothermalDataId");

                    b.HasOne("Database.Data.OpticalData", "OpticalData")
                        .WithMany("Resources")
                        .HasForeignKey("OpticalDataId");

                    b.HasOne("Database.Data.GetHttpsResource", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Database.Data.PhotovoltaicData", "PhotovoltaicData")
                        .WithMany("Resources")
                        .HasForeignKey("PhotovoltaicDataId");

                    b.OwnsMany("Database.Data.FileMetaInformation", "ArchivedFilesMetaInformation", b1 =>
                        {
                            b1.Property<Guid>("GetHttpsResourceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("DataFormatId")
                                .HasColumnType("uuid");

                            b1.PrimitiveCollection<string[]>("Path")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("GetHttpsResourceId", "Id");

                            b1.ToTable("FileMetaInformation", "database");

                            b1.WithOwner()
                                .HasForeignKey("GetHttpsResourceId");
                        });

                    b.OwnsOne("Database.Data.ToTreeVertexAppliedConversionMethod", "AppliedConversionMethod", b1 =>
                        {
                            b1.Property<Guid>("GetHttpsResourceId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MethodId")
                                .HasColumnType("uuid");

                            b1.Property<string>("SourceName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GetHttpsResourceId");

                            b1.ToTable("get_https_resource", "database");

                            b1.WithOwner()
                                .HasForeignKey("GetHttpsResourceId");

                            b1.OwnsMany("Database.Data.NamedMethodArgument", "Arguments", b2 =>
                                {
                                    b2.Property<Guid>("ToTreeVertexAppliedConversionMethodGetHttpsResourceId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<JsonDocument>("Value")
                                        .IsRequired()
                                        .HasColumnType("jsonb");

                                    b2.HasKey("ToTreeVertexAppliedConversionMethodGetHttpsResourceId", "Id");

                                    b2.ToTable("get_https_resource_Arguments", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("ToTreeVertexAppliedConversionMethodGetHttpsResourceId");
                                });

                            b1.Navigation("Arguments");
                        });

                    b.Navigation("AppliedConversionMethod");

                    b.Navigation("ArchivedFilesMetaInformation");

                    b.Navigation("CalorimetricData");

                    b.Navigation("GeometricData");

                    b.Navigation("HygrothermalData");

                    b.Navigation("OpticalData");

                    b.Navigation("Parent");

                    b.Navigation("PhotovoltaicData");
                });

            modelBuilder.Entity("Database.Data.HygrothermalData", b =>
                {
                    b.OwnsOne("Database.Data.AppliedMethod", "AppliedMethod", b1 =>
                        {
                            b1.Property<Guid>("HygrothermalDataId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MethodId")
                                .HasColumnType("uuid");

                            b1.HasKey("HygrothermalDataId");

                            b1.ToTable("hygrothermal_data", "database");

                            b1.WithOwner()
                                .HasForeignKey("HygrothermalDataId");

                            b1.OwnsMany("Database.Data.NamedMethodArgument", "Arguments", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodHygrothermalDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<JsonDocument>("Value")
                                        .IsRequired()
                                        .HasColumnType("jsonb");

                                    b2.HasKey("AppliedMethodHygrothermalDataId", "Id");

                                    b2.ToTable("hygrothermal_data_Arguments", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodHygrothermalDataId");
                                });

                            b1.OwnsMany("Database.Data.NamedMethodSource", "Sources", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodHygrothermalDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("AppliedMethodHygrothermalDataId", "Id");

                                    b2.ToTable("hygrothermal_data_Sources", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodHygrothermalDataId");

                                    b2.OwnsOne("Database.Data.CrossDatabaseDataReference", "Value", b3 =>
                                        {
                                            b3.Property<Guid>("NamedMethodSourceAppliedMethodHygrothermalDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("NamedMethodSourceId")
                                                .HasColumnType("integer");

                                            b3.Property<Guid>("DataId")
                                                .HasColumnType("uuid");

                                            b3.Property<DataKind>("DataKind")
                                                .HasColumnType("database.data_kind");

                                            b3.Property<DateTime>("DataTimestamp")
                                                .HasColumnType("timestamp with time zone");

                                            b3.Property<Guid>("DatabaseId")
                                                .HasColumnType("uuid");

                                            b3.HasKey("NamedMethodSourceAppliedMethodHygrothermalDataId", "NamedMethodSourceId");

                                            b3.ToTable("hygrothermal_data_Sources", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("NamedMethodSourceAppliedMethodHygrothermalDataId", "NamedMethodSourceId");
                                        });

                                    b2.Navigation("Value")
                                        .IsRequired();
                                });

                            b1.Navigation("Arguments");

                            b1.Navigation("Sources");
                        });

                    b.OwnsMany("Database.Data.DataApproval", "Approvals", b1 =>
                        {
                            b1.Property<Guid>("HygrothermalDataId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ApproverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("KeyFingerprint")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Query")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Response")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("HygrothermalDataId", "Id");

                            b1.ToTable("hygrothermal_data_Approvals", "database");

                            b1.WithOwner()
                                .HasForeignKey("HygrothermalDataId");

                            b1.OwnsOne("Database.Data.Publication", "Publication", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalHygrothermalDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("ArXiv")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<string[]>("Authors")
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Doi")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<string>("Urn")
                                        .HasColumnType("text");

                                    b2.Property<string>("WebAddress")
                                        .HasColumnType("text");

                                    b2.HasKey("DataApprovalHygrothermalDataId", "DataApprovalId");

                                    b2.ToTable("hygrothermal_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalHygrothermalDataId", "DataApprovalId");
                                });

                            b1.OwnsOne("Database.Data.Standard", "Standard", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalHygrothermalDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("Locator")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<Standardizer[]>("Standardizers")
                                        .IsRequired()
                                        .HasColumnType("database.standardizer[]");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<int?>("Year")
                                        .HasColumnType("integer");

                                    b2.HasKey("DataApprovalHygrothermalDataId", "DataApprovalId");

                                    b2.ToTable("hygrothermal_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalHygrothermalDataId", "DataApprovalId");

                                    b2.OwnsOne("Database.Data.Numeration", "Numeration", b3 =>
                                        {
                                            b3.Property<Guid>("StandardDataApprovalHygrothermalDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("StandardDataApprovalId")
                                                .HasColumnType("integer");

                                            b3.Property<string>("MainNumber")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Prefix")
                                                .HasColumnType("text");

                                            b3.Property<string>("Suffix")
                                                .HasColumnType("text");

                                            b3.HasKey("StandardDataApprovalHygrothermalDataId", "StandardDataApprovalId");

                                            b3.ToTable("hygrothermal_data_Approvals", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("StandardDataApprovalHygrothermalDataId", "StandardDataApprovalId");
                                        });

                                    b2.Navigation("Numeration")
                                        .IsRequired();
                                });

                            b1.Navigation("Publication");

                            b1.Navigation("Standard");
                        });

                    b.Navigation("AppliedMethod")
                        .IsRequired();

                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("Database.Data.OpticalData", b =>
                {
                    b.OwnsMany("Database.Data.CielabColor", "CielabColors", b1 =>
                        {
                            b1.Property<Guid>("OpticalDataId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<double>("AStar")
                                .HasColumnType("double precision");

                            b1.Property<double>("BStar")
                                .HasColumnType("double precision");

                            b1.Property<double>("LStar")
                                .HasColumnType("double precision");

                            b1.HasKey("OpticalDataId", "Id");

                            b1.ToTable("CielabColor", "database");

                            b1.WithOwner()
                                .HasForeignKey("OpticalDataId");
                        });

                    b.OwnsOne("Database.Data.AppliedMethod", "AppliedMethod", b1 =>
                        {
                            b1.Property<Guid>("OpticalDataId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MethodId")
                                .HasColumnType("uuid");

                            b1.HasKey("OpticalDataId");

                            b1.ToTable("optical_data", "database");

                            b1.WithOwner()
                                .HasForeignKey("OpticalDataId");

                            b1.OwnsMany("Database.Data.NamedMethodArgument", "Arguments", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodOpticalDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<JsonDocument>("Value")
                                        .IsRequired()
                                        .HasColumnType("jsonb");

                                    b2.HasKey("AppliedMethodOpticalDataId", "Id");

                                    b2.ToTable("optical_data_Arguments", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodOpticalDataId");
                                });

                            b1.OwnsMany("Database.Data.NamedMethodSource", "Sources", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodOpticalDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("AppliedMethodOpticalDataId", "Id");

                                    b2.ToTable("optical_data_Sources", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodOpticalDataId");

                                    b2.OwnsOne("Database.Data.CrossDatabaseDataReference", "Value", b3 =>
                                        {
                                            b3.Property<Guid>("NamedMethodSourceAppliedMethodOpticalDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("NamedMethodSourceId")
                                                .HasColumnType("integer");

                                            b3.Property<Guid>("DataId")
                                                .HasColumnType("uuid");

                                            b3.Property<DataKind>("DataKind")
                                                .HasColumnType("database.data_kind");

                                            b3.Property<DateTime>("DataTimestamp")
                                                .HasColumnType("timestamp with time zone");

                                            b3.Property<Guid>("DatabaseId")
                                                .HasColumnType("uuid");

                                            b3.HasKey("NamedMethodSourceAppliedMethodOpticalDataId", "NamedMethodSourceId");

                                            b3.ToTable("optical_data_Sources", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("NamedMethodSourceAppliedMethodOpticalDataId", "NamedMethodSourceId");
                                        });

                                    b2.Navigation("Value")
                                        .IsRequired();
                                });

                            b1.Navigation("Arguments");

                            b1.Navigation("Sources");
                        });

                    b.OwnsMany("Database.Data.DataApproval", "Approvals", b1 =>
                        {
                            b1.Property<Guid>("OpticalDataId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ApproverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("KeyFingerprint")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Query")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Response")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("OpticalDataId", "Id");

                            b1.ToTable("optical_data_Approvals", "database");

                            b1.WithOwner()
                                .HasForeignKey("OpticalDataId");

                            b1.OwnsOne("Database.Data.Publication", "Publication", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalOpticalDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("ArXiv")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<string[]>("Authors")
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Doi")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<string>("Urn")
                                        .HasColumnType("text");

                                    b2.Property<string>("WebAddress")
                                        .HasColumnType("text");

                                    b2.HasKey("DataApprovalOpticalDataId", "DataApprovalId");

                                    b2.ToTable("optical_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalOpticalDataId", "DataApprovalId");
                                });

                            b1.OwnsOne("Database.Data.Standard", "Standard", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalOpticalDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("Locator")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<Standardizer[]>("Standardizers")
                                        .IsRequired()
                                        .HasColumnType("database.standardizer[]");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<int?>("Year")
                                        .HasColumnType("integer");

                                    b2.HasKey("DataApprovalOpticalDataId", "DataApprovalId");

                                    b2.ToTable("optical_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalOpticalDataId", "DataApprovalId");

                                    b2.OwnsOne("Database.Data.Numeration", "Numeration", b3 =>
                                        {
                                            b3.Property<Guid>("StandardDataApprovalOpticalDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("StandardDataApprovalId")
                                                .HasColumnType("integer");

                                            b3.Property<string>("MainNumber")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Prefix")
                                                .HasColumnType("text");

                                            b3.Property<string>("Suffix")
                                                .HasColumnType("text");

                                            b3.HasKey("StandardDataApprovalOpticalDataId", "StandardDataApprovalId");

                                            b3.ToTable("optical_data_Approvals", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("StandardDataApprovalOpticalDataId", "StandardDataApprovalId");
                                        });

                                    b2.Navigation("Numeration")
                                        .IsRequired();
                                });

                            b1.Navigation("Publication");

                            b1.Navigation("Standard");
                        });

                    b.Navigation("AppliedMethod")
                        .IsRequired();

                    b.Navigation("Approvals");

                    b.Navigation("CielabColors");
                });

            modelBuilder.Entity("Database.Data.PhotovoltaicData", b =>
                {
                    b.OwnsOne("Database.Data.AppliedMethod", "AppliedMethod", b1 =>
                        {
                            b1.Property<Guid>("PhotovoltaicDataId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MethodId")
                                .HasColumnType("uuid");

                            b1.HasKey("PhotovoltaicDataId");

                            b1.ToTable("photovoltaic_data", "database");

                            b1.WithOwner()
                                .HasForeignKey("PhotovoltaicDataId");

                            b1.OwnsMany("Database.Data.NamedMethodArgument", "Arguments", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodPhotovoltaicDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<JsonDocument>("Value")
                                        .IsRequired()
                                        .HasColumnType("jsonb");

                                    b2.HasKey("AppliedMethodPhotovoltaicDataId", "Id");

                                    b2.ToTable("photovoltaic_data_Arguments", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodPhotovoltaicDataId");
                                });

                            b1.OwnsMany("Database.Data.NamedMethodSource", "Sources", b2 =>
                                {
                                    b2.Property<Guid>("AppliedMethodPhotovoltaicDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("AppliedMethodPhotovoltaicDataId", "Id");

                                    b2.ToTable("photovoltaic_data_Sources", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("AppliedMethodPhotovoltaicDataId");

                                    b2.OwnsOne("Database.Data.CrossDatabaseDataReference", "Value", b3 =>
                                        {
                                            b3.Property<Guid>("NamedMethodSourceAppliedMethodPhotovoltaicDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("NamedMethodSourceId")
                                                .HasColumnType("integer");

                                            b3.Property<Guid>("DataId")
                                                .HasColumnType("uuid");

                                            b3.Property<DataKind>("DataKind")
                                                .HasColumnType("database.data_kind");

                                            b3.Property<DateTime>("DataTimestamp")
                                                .HasColumnType("timestamp with time zone");

                                            b3.Property<Guid>("DatabaseId")
                                                .HasColumnType("uuid");

                                            b3.HasKey("NamedMethodSourceAppliedMethodPhotovoltaicDataId", "NamedMethodSourceId");

                                            b3.ToTable("photovoltaic_data_Sources", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("NamedMethodSourceAppliedMethodPhotovoltaicDataId", "NamedMethodSourceId");
                                        });

                                    b2.Navigation("Value")
                                        .IsRequired();
                                });

                            b1.Navigation("Arguments");

                            b1.Navigation("Sources");
                        });

                    b.OwnsMany("Database.Data.DataApproval", "Approvals", b1 =>
                        {
                            b1.Property<Guid>("PhotovoltaicDataId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ApproverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("KeyFingerprint")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Query")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Response")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("PhotovoltaicDataId", "Id");

                            b1.ToTable("photovoltaic_data_Approvals", "database");

                            b1.WithOwner()
                                .HasForeignKey("PhotovoltaicDataId");

                            b1.OwnsOne("Database.Data.Publication", "Publication", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalPhotovoltaicDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("ArXiv")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<string[]>("Authors")
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Doi")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<string>("Urn")
                                        .HasColumnType("text");

                                    b2.Property<string>("WebAddress")
                                        .HasColumnType("text");

                                    b2.HasKey("DataApprovalPhotovoltaicDataId", "DataApprovalId");

                                    b2.ToTable("photovoltaic_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalPhotovoltaicDataId", "DataApprovalId");
                                });

                            b1.OwnsOne("Database.Data.Standard", "Standard", b2 =>
                                {
                                    b2.Property<Guid>("DataApprovalPhotovoltaicDataId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("DataApprovalId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Abstract")
                                        .HasColumnType("text");

                                    b2.Property<string>("Locator")
                                        .HasColumnType("text");

                                    b2.Property<string>("Section")
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<Standardizer[]>("Standardizers")
                                        .IsRequired()
                                        .HasColumnType("database.standardizer[]");

                                    b2.Property<string>("Title")
                                        .HasColumnType("text");

                                    b2.Property<int?>("Year")
                                        .HasColumnType("integer");

                                    b2.HasKey("DataApprovalPhotovoltaicDataId", "DataApprovalId");

                                    b2.ToTable("photovoltaic_data_Approvals", "database");

                                    b2.WithOwner()
                                        .HasForeignKey("DataApprovalPhotovoltaicDataId", "DataApprovalId");

                                    b2.OwnsOne("Database.Data.Numeration", "Numeration", b3 =>
                                        {
                                            b3.Property<Guid>("StandardDataApprovalPhotovoltaicDataId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("StandardDataApprovalId")
                                                .HasColumnType("integer");

                                            b3.Property<string>("MainNumber")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Prefix")
                                                .HasColumnType("text");

                                            b3.Property<string>("Suffix")
                                                .HasColumnType("text");

                                            b3.HasKey("StandardDataApprovalPhotovoltaicDataId", "StandardDataApprovalId");

                                            b3.ToTable("photovoltaic_data_Approvals", "database");

                                            b3.WithOwner()
                                                .HasForeignKey("StandardDataApprovalPhotovoltaicDataId", "StandardDataApprovalId");
                                        });

                                    b2.Navigation("Numeration")
                                        .IsRequired();
                                });

                            b1.Navigation("Publication");

                            b1.Navigation("Standard");
                        });

                    b.Navigation("AppliedMethod")
                        .IsRequired();

                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Database.Data.CalorimetricData", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Database.Data.GeometricData", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Database.Data.GetHttpsResource", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Database.Data.HygrothermalData", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Database.Data.OpticalData", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Database.Data.PhotovoltaicData", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
